## vim: set ft=rb:
module lexah.transpiler

require "lexah/tools/StringHandle"
require "sys/io/File"

class self

![private] var script: Bool = false
![private] var path: String = ""
![private] var name: String = ""
![private] var currentType: String = ""
![private] var opened: Int = 0
![private] var tokens: Array<String> = [
    ## Line break
    "\n",

    ## Inheritance & interfaces
    "<", "::",

    ## Comments
    "##*", "*##", "##",

    ## Lexah keywords
    "-", "require", "def", ".new", "self.", "self", "end", "do", "puts", "raise", "begin", "rescue", "const", "module", "var",

    ## Standard keywords
    "![", "]", "@{", "}", "\\",  "\"", "\\\"", "(", ")", "/", "=", "#", ",", "@:", "@", ":", "*", "{", "}", ".",
    ";", "?", "[", "<", ">",

    ## Expressions
    "elsif", "if", "else", "while", "for", "then", "and", "or",

    ## Types
    "class", "enum", "abstract", "interface",

    ## Modifiers
    "private", "public",
]

def new()

end

##*
    Transpile the given file from the given directory
*##
def transpile(directory: String, file: String): String
    var currentPackage = StringTools.replace(file, directory, "")
    currentPackage = StringTools.replace(currentPackage, "\\", "/")
    var currentModule = StringTools.replace(currentPackage.substr(currentPackage.lastIndexOf("/") + 1), ".lxa", "")
    currentPackage = StringTools.replace(currentPackage, currentPackage.substr(currentPackage.lastIndexOf("/")), "")
    currentPackage = StringTools.replace(currentPackage, "/", ".")

    if currentPackage.charAt(0) == "." then
        currentPackage = currentPackage.substr(1)
    end

    var content = File.getContent(file)

    @name = currentModule
    @path = currentPackage

    return @run(StringHandle.new(content, @tokens))
end

##*
    Process transpile
*##
![private] def run(handle: StringHandle): String
    var is_fixed = false
    var fully_fixed = false

    while handle.nextToken() do
        ## Multiline Comment
        if handle.is("##*") then
            handle.remove()
            handle.insert("/**")

            while handle.nextToken() do
                if handle.is("*##") then
                    handle.remove()
                    handle.insert("**/")
                    handle.increment()
                    break
                end

                handle.increment()
            end

        ## Single line comment
        elsif handle.is("##") then
            handle.remove()
            handle.insert("//")
            handle.increment()
            handle.next("\n")
            handle.increment()

        ## Invoke pure haxe code
        elsif handle.is("@{") then
          handle.remove()
          handle.next("}")
          handle.remove()
          handle.increment()

        ## Constants
        elsif handle.is("const") then
            handle.remove()
            handle.insert("public static inline var")
            handle.increment()

        ## Modifiers on the function/var (private, dynamic, ...)
        elsif handle.is("![") then
            handle.remove()
            var startPosition = handle.position
            handle.increment()

            handle.next("]")
            var finalPosition = handle.position
            handle.position = startPosition
            var comas = 0

            while true do
                if !handle.next(",") and handle.position < finalPosition then
                    handle.next("]")
                    handle.remove()
                    handle.nextToken()
                    break
                end

                if handle.position > finalPosition then
                    handle.position = finalPosition - comas

                    ## If some "," removed
                    if comas != 0 then
                        handle.prev("]")
                    end

                    handle.remove()
                    handle.nextToken()
                    break
                end

                comas++
                handle.remove()
            end

            if handle.is("\n") then
                handle.remove()
                handle.insert(" ")
                handle.increment()
            end

        ## Compiler defines
        elsif handle.is("#") then
            handle.next("\n")

        ## this.
        elsif handle.is("@") then
            @check_this(handle)

        ## String
        elsif handle.is("\"") then
            @process_string(handle)

        ## Instanciate object
        elsif handle.is(".new") then
            handle.remove()
            handle.prevTokenLine()

            while true do
                if handle.is(">") then
                    handle.prev("<")
                    handle.decrement()
                    handle.prevTokenLine()
                elsif !handle.isOne(["=", ":", "\n", ".", "(", "[", ";", ","]) then
                    handle.prevTokenLine()
                else
                    break
                end
            end

            handle.increment()
            handle.insert(" new ")
            handle.increment()

        ## trace()
        elsif handle.safeis("puts") then
            handle.remove()
            handle.insert("trace")
            handle.increment()

        ## try {}
        elsif handle.safeis("begin") then
            handle.remove()
            handle.insert("try {")
            handle.increment()

        ## throw
        elsif handle.safeis("raise") then
            handle.remove()
            handle.insert("throw")
            handle.increment()

        ## catch() {}
        elsif handle.safeis("rescue") then
            handle.remove()
            handle.insert("} catch")
            handle.increment()
            handle.insert("(")
            handle.next("\n")
            handle.insert("){")
            handle.increment()

        ## }
        elsif handle.safeis("end") then
            handle.remove()
            handle.insert("}")
            @opened--
            handle.increment()

        ## module = package
        elsif handle.is_word("module") then
            handle.remove()
            handle.insert("package")
            handle.increment()
            handle.next("\n")

        ## require = import
        elsif handle.safeis("require") then
            handle.remove()
            handle.insert("import")
            handle.increment()

            var first_quote = true

            while handle.nextToken() do
                if handle.is("\"") then
                    handle.remove()

                    if (!first_quote) then
                        handle.insert(";")
                        handle.increment()
                        handle.increment()
                        break
                    end

                    first_quote = false
                elsif handle.is("/") then
                    handle.remove()
                    handle.insert(".")
                end

                handle.increment()
            end

        ## Function
        elsif handle.safeis("def") then
            @check_visibility(handle, "def")

            handle.insert("function")
            handle.next("\n")

            if (@currentType == "class") then
                handle.insert("{")
            elsif (@currentType == "interface") then
                handle.insert(";")
            end

            handle.increment()
            @opened++

        ## Variable
        elsif handle.safeis("var") then
            @check_visibility(handle, "var")

            handle.insert("var")
            handle.increment()

        ## Anonymous
        elsif handle.safeis("do") then
            handle.remove()
            handle.insert("function")
            handle.increment()
            handle.insert("{")
            handle.increment()
            @opened++

        ## elsif
        elsif handle.safeis("elsif") then
            handle.remove()
            handle.insert("}else if")
            handle.increment()
            @opened--
            @consume_condition(handle, "then")

        ## Loops
        elsif handle.safeis("while") or handle.safeis("for") then
            handle.increment()
            @consume_condition(handle, "do")

        ## next = continue
        elsif handle.safeis("next") then
            handle.remove()
            handle.insert("continue")
            handle.increment()

        ## Condition "if"
        elsif handle.safeis("if") then
            handle.increment()
            @consume_condition(handle, "then")

        ## Condition "else"
        elsif handle.safeis("else") then
            handle.insert("}")
            handle.increment()
            handle.increment("else")
            handle.insert("{")
            handle.increment()

        ## [abstract] class/interface/enum
        elsif handle.safeis("class") or handle.safeis("interface") or handle.safeis("enum") then
          @currentType = handle.current
          handle.remove()
          handle.insert("using Lambda;\nusing StringTools;\n\n").increment()
          handle.insert(@currentType)

          handle.increment()

          while handle.nextToken() do
            if (handle.is("self")) then
              handle.remove()
              handle.insert(name)
            elsif handle.safeis("<") then
              handle.remove()
              handle.insert("extends")
            elsif handle.safeis("::") then
              handle.remove()
              handle.insert("implements")
            elsif handle.is("\n") then
              handle.insert("{")
              break
            end

            handle.increment()
          end

        ## Statics
        elsif handle.safeisStart("self.") then
            handle.remove()
            handle.insert(@name + ".")
            handle.increment()

        ## Line break
        elsif handle.is("\n") then
            var pos = handle.position
            var insert = true

            handle.prevTokenLine()
            if handle.isOne(["=", ";", "*", ".", "/", "," , "|", "&", "{", "(", "[", "^", "%", "~", "\n", "}", "?", ":"])
            and @only_whitespace(handle.content, handle.position + 1, pos) then
                insert = false
            end

            handle.position = pos
            handle.increment("\n")
            handle.nextToken()
            if handle.isOne(["?", ":", "=", "*", ".", "/", "," , "|", "&", ")", "]", "^", "%", "~"])
            and @only_whitespace(handle.content, pos + 1, handle.position - 1) then
                insert = false
            end

            handle.prev("\n")
            if insert then
                handle.insert(";")
                handle.increment()
            end

            handle.increment()

        ## Otherwise, skip
        else
            handle.increment()
        end
    end

    handle.content = handle.content + "\n}"

    return handle.content
end

##*
    Consume curlies (functions)
*##
![private] def consume_curlies(handle: StringHandle)
    var count = 0

    while handle.nextToken() do
        if handle.is("(") then
            count++
        elsif handle.is(")") then
            count--
        end

        handle.increment();
        if count == 0 then
            break
        end
    end
end

##*
    Consume a condition (if, elsif, while, for)
*##
![private] def consume_condition(handle: StringHandle, token: String)
    handle.insert("(")

    while handle.nextToken() do
        if handle.safeis(token) then
            handle.remove()
            break
        elsif handle.safeis("and") then
            handle.remove()
            handle.insert("&&")
        elsif handle.safeis("or") then
            handle.remove()
            handle.insert("||")
        elsif handle.is("\"") then
            @process_string(handle)
        elsif handle.is("@") then
            @check_this(handle)
        end

        handle.increment()
    end

    handle.insert(") {")
    handle.increment(") {")
    @opened++
end

##*
    Search for "@" as "this"
*##
![private] def check_this(handle: StringHandle)
    var position = handle.position
    handle.nextToken()

    if handle.position != position + 1 then
        handle.position = position
        handle.remove()
        handle.insert("this.")
        handle.increment()
    end
end

##*
    Match whitespaces
*##
![private] def only_whitespace(content: String, from: Int, to: Int)
    var sub = content.substr(from, to - from)
    var regex = EReg.new("^\\s*$", "i")

    return regex.match(sub)
end

##*
    Process a string line
*##
![private] def process_string(handle: StringHandle)
    if handle.at("\"\"\"") then
        handle.remove("\"\"\"")
        handle.insert("\"")
    end

    handle.increment()

    while handle.nextToken() do
        if handle.is("\"") and
        (handle.content.charAt(handle.position -1) != "\\" or
            (handle.content.charAt(handle.position -1) == "\\" and
            handle.content.charAt(handle.position -2) == "\\"))
        then
            break
        end

        handle.increment()
    end

    if handle.at("\"\"\"") then
        handle.remove("\"\"\"")
        handle.insert("\"")
    end

    handle.increment()
end

##*
    Checks the visibility of a function or var
*##
![private] def check_visibility(handle: StringHandle, token: String)
    var pos = handle.position
    var has_visibility = false

    if (this.opened == 0) then
        handle.prev("\n")
        while (handle.nextToken() and handle.position <= pos) do
            if (handle.is("public") or handle.is("private")) then
                has_visibility = true
            end

            handle.increment()
        end

        handle.prev(token)
    end

    handle.remove()

    if (!has_visibility and @opened == 0) then
        handle.insert("public ")
        handle.increment()
    end
end
