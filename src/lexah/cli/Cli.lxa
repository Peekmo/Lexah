-- vim: set ft=rb:
module lexah.cli

require "mcli/CommandLine"
require "sys/FileSystem"
require "lexah/tools/Error"

--*
     _                  _
    | |                | |
    | | ____ _   _ ____| | _
    | |/ _  | \ / ) _  | || \
    | ( (/ / ) X ( ( | | | | |
    |_|\____|_/ \_)_||_|_| |_|

    Lexah 0.0.1 - https://github.com/Peekmo/lexah
*--
class self < CommandLine

const ERROR_TYPE = "transpile_error"

--*
    Source directory or file
    @alias s
*--
![public]
var src: String

--*
    Destination directory or file
    @alias d
*--
![public]
var dest: String

--*
    Execute the command when source file(s) are changed
    @alias w
*--
![public]
var watch: Bool

--*
    Copy only lexah files to dest directory
*--
![public]
var lexahOnly: Bool

--*
    Show this message
    @alias h
*--
![public]
def help() : Void
    Sys.println(@showUsage())
    Sys.exit(0)
end

![private]
def transpile() : Void
    if @src != null then
        if !FileSystem.exists(@src) then
            Error.create(self.ERROR_TYPE, "Source not found")
        end

        var transpiler = TranspilerCommand.new(@src, @dest)
        while true do
            begin
                if transpiler.transpile(@lexahOnly) and
                    transpiler.response != null and
                    transpiler.response != "" then
                    Sys.println(transpiler.response)
                else
                    Sys.println("Transpilation done.")
                end

            rescue err: String
                Sys.println(err)
            end

            if !@watch then
                break
            end
        end
    end
end

![public]
def runDefault() : Void
    begin
        if @src != null then
            @transpile()
        else
            @help()
        end
    rescue err:String
        Sys.println(err)
        Sys.exit(0)
    end
end
