-- vim: set ft=rb:
module lexah.tools

class StringHandle

@:[public] var content: String
@:[public] var position: Int
@:[public] var current: String
@:[public] var tokens: Array<String>

def new(content: String, ?tokens: Array<String>, position: Int = 0)
    @content = content

    if tokens == null then
        @tokens = ["\n"]
    else
        @tokens = tokens
    end

    @position = position
end

--*
    Reset position and text
*--
def reset() : Void
    @position = 0
    @current = null
end

--*
    Check if we are in the beginning of @current
*--
def atStart() : Bool
    return @position <= 0
end

--*
    Check if we are in the end of @current
*--
def atEnd() : Bool
    return @position >= @content.length
end

--*
    Check if we are in near the beginning of @current
*--
def nearStart(tolerance: Int) : Bool
    return (@position - tolerance) <= 0
end

--*
    Check if we are in near the end of @current
*--
def nearEnd(tolerance: Int) : Bool
    return (@position + tolerance) > @content.length
end

--*
    Go to the closest token
*--
def closest(content: String): Bool
    var divided = @divide();
    var regex = new EReg("[^\\w][ \t]*" + content, "")
    var sub = @content.substr(@position)

    var count = 1
    while true do
        if sub.charAt(count) == " "
        or sub.charAt(count) == "\t"
        or sub.charAt(count) == "\n" then
            count++
        else
            break
        end
    end

    return regex.match(sub.substr(0, count))
end

--*
    Checks if the current is the content
*--
def is(content: String): Bool
    return @current == content
end

--*
    Checks if the current is in the given array
*--
def isOne(content: Array<String>): Bool
    var contains = false

    for cnt in content do
        contains = contains || @current == cnt
    end

    return contains
end

--*
    Token started by whitespace
*--
def safeisStart(content: String): Bool
    var regex = new EReg("[^\\w]" + content, "")

    if @nearStart(1) then
        return @is(content)
    end

    if @nearEnd(content.length + 1) then
        return @is(content)
    end

    var sub = @content.substr(
        @nearStart(1) ? @position : @position - 1,
        @nearEnd(content.length + 1) ? content.length : content.length + 1
    )

    return regex.match(sub)
end

--*
    Token ended by whitespace
*--
def safeisEnd(content: String): Bool
    var regex = new EReg(content + "[^\\w]", "")

    if @nearEnd(content.length + 2) then
        return @is(content)
    end

    var sub = @content.substr(
        0,
        @nearEnd(content.length+2) ? content.length : content.length+2
    )

    return regex.match(sub)
end

--*
    Token started and ended by withespace
*--
def safeis(content: String): Bool
    var regex = new EReg("[^\\w]" + content + "[^\\w]", "")

    if @nearStart(1) then
        return @safeisEnd(content)
    end

    if @nearEnd(content.length + 2) then
        return @safeisStart(content)
    end

    var sub = @content.substr(@position-1, content.length + 2)

    return regex.match(sub)
end

--*
    Checks if the content to the right is...
*--
def at(content: String): Bool
    var divided = @divide()

    if divided.right.substr(0, content.length) == content then
        return true
    end

    return false
end

--*
    Get the previous given token
    Returns the previous same token as current one if content is not provided
*--
def prev(?content: String): Bool
    if content == null then
        if @current != null then
            return @prev(@current)
        end

        return false
    end

    var new_pos = @content.substr(0, @position).lastIndexOf(content)

    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = content
    return true
end

--*
    Get the next given token
    Returns the next same token as current one if content is not provided
*--
def next(?content: String): Bool
    if content == null then
        if @current != null then
            return @next(@current)
        end

        return false
    end

    var new_pos = @content.indexOf(content, @position)
    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = content
    return true
end

--*
    Gets the previous token
*--
def prevToken(): Bool
    var new_pos = @position + 1
    var current_token = ""

    for token in tokens do
        var pos = @content.substr(0, @position).lastIndexOf(token)

        if pos != -1 and (pos > new_pos or new_pos == @position + 1) then
            new_pos = pos
            current_token = token
        end
    end

    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = current_token
    return true
end

--*
    Gets the previous token on the same line
*--
def prevTokenLine(): Bool
    var new_pos = @position + 1
    var current_token = ""

    for token in tokens do
        var pos = @content.substr(0, @position).lastIndexOf(token)

        if pos != -1 and (pos > new_pos or new_pos == @position + 1) then
            new_pos = pos
            current_token = token
        end
    end

    var pos = @content.substr(0, @position).lastIndexOf("\n")
    if pos != -1 and (pos > new_pos or new_pos == @position+1) then
        new_pos = pos
        current_token = "\n"
    end

    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = current_token
    return true
end

--*
    Gets the next token on the same line
*--
def nextTokenLine(): Bool
    var new_pos = -1
    var current_token = ""

    for token in tokens do
        var pos = @content.indexOf(token, @position)

        if pos != -1 and (pos < new_pos or new_pos == -1) then
            new_pos = pos
            current_token = token
        end
    end

    var pos = @content.indexOf("\n", @position)
    if pos != -1 and (pos < new_pos or new_pos == -1) then
        new_pos = pos
        current_token = "\n"
    end

    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = current_token
    return true
end

--*
    Next token (not safe)
*--
def nextToken(): Bool
    var new_pos = -1
    var current_token = ""

    for token in tokens do
        var pos = @content.indexOf(token, @position)

        if pos != -1 and (pos < new_pos or new_pos == -1) then
            new_pos = pos
            current_token = token
        end
    end

    if new_pos == -1 then
        return false
    end

    @position = new_pos
    @current  = current_token
    return true
end

--*
    Increment position from the current token
*--
def increment(?content: String): StringHandle
    if content == null then
        if @current != null then
            @increment(@current)
        end

        return this
    end

    var new_pos = @position + content.length

    if new_pos > @content.length then
        return this
    end

    @position = new_pos
    @current = content
    return this
end

--*
    Decrement position from the current token
*--
def decrement(?content: String): StringHandle
    if content == null then
        if @current != null then
            @decrement(@current)
        end

        return this
    end

    var new_pos = @position - content.length

    if new_pos < 0 then
        return this
    end

    @position = new_pos
    @current = content
    return this
end

--*
    Insert content to the given position
*--
def insert(?content: String): StringHandle
    if content == null then
        if @current != null then
            @insert(@current)
        end

        return this
    end

    var divided = @divide()

    @content = divided.left + content + divided.right
    @current = content
    return this
end

--*
    Remove content to the given position
*--
def remove(?content: String): StringHandle
    if content == null then
        if @current != null then
            @remove(@current)
        end

        return this
    end

    var length = content.length
    var divided = @divide()

    if divided.right.length < length then
        return this
    end

    @content = divided.left + divided.right.substr(length)
    @current = content
    return this
end

--*
    Splits the text in 2 parts
*--
def divide(?offset: Int = 0)
    return {
        left: (@position + offset) > 0
            ? @content.substr(0, @position + offset)
            : "",
        right: (@position + offset) < @content.length
            ? @content.substring(@position + offset)
            : "",
    }
end
