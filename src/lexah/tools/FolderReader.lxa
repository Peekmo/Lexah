-- vim: set ft=rb:
module lexah.tools

require "sys/FileSystem"
require "sys/io/File"

class self

--*
    Returns an array of all files which are in the given folder and its subfolders

    @param root_folder : String Root folder for the search

    @return Files found
*--
![public, static]
def get_files(root_folder: String): Array<String>
    var files = Array<String>.new()

    if FileSystem.exists(root_folder) then
        var folders = FileSystem.readDirectory(root_folder)

        for file in folders.iterator() do
            var path = root_folder + "/" + file

            if FileSystem.isDirectory(path) then
                var data = self.get_files(path)

                for i in data do
                    files.push(i)
                end
            else
                files.push(path)
            end
        end
    end

    return files
end

--*
    Creates a file to the given path, with the given content
    (Creates all directories if they not exists)

    @param path     String Path to the file
    @param ?content String File content
*--
![public, static]
def create_file(path: String, ?content: String): Void
    var parts = path.split("/")
    var fileName = parts.pop()

    self.create_directory(parts.join("/"))

    if content == null then
        content = ""
    end

    File.saveContent(path, content)
end

--*
    Creates the given directory (and all path directories if needed)

    @param path String Path to the given directory
*--
![public, static]
def create_directory(path: String): Void
    var parts = path.split("/")
    var done : String = null

    for part in parts.iterator() do
        done = done == null ? part : done + "/" + part

        if !FileSystem.exists(done) then
            FileSystem.createDirectory(done)
        end
    end
end

--*
    Copy all files from source to destination

    @param  source      String Source path
    @param  destination String Destination path
*--
![public, static]
def copy_file_system(source: String, destination: String): Void
    begin
        if source.endsWith("/") then
            source = source.substr(0, -1)
        end

        -- File
        if !FileSystem.isDirectory(source) then
            self.create_file(destination, File.getContent(source))

        -- Directory
        else
            var files = FileSystem.readDirectory(source)

            for file in files.iterator() do
                if FileSystem.isDirectory('$source/$file') then
                    self.create_directory(destination)
                end

                self.copy_file_system('$source/$file', '$destination/$file')
            end
        end
    rescue msg: String
        raise 'Unable to copy $source to $destination : $msg'
    end
end
